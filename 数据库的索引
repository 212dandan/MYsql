索引
1.索引的定义
索引是一种特殊的数据库结构，用来快速查询数据库表中的特定记录
索引是提高数据库性能的重要方式
索引由数据库表中一列或多列组合而成的，提高对表中数据的查询速度
索引是建立在表上的，是对表中一列或多列的值进行排序的一种结构
在MYsql中所有的数据类型都可以被索引
2.索引的优缺点
优点：提高检索数据的速度，这是创建索引最主要的原因；
           对于有依赖关系的子表和父表进行联合查询时，可以提高查询速度
缺点：创建和维护索引需要时间，所耗费的时间随数据量的增加而增加
           索引要占用物理空间，每个索引占用一定的物理空间
           增加、删除、修改数据时，要动态的维护索引，造成数据的维护速度降低了
3.索引种类
MYsql的索引包括：
  普通索引：
  唯一性索引：
  全文索引：
  单列索引：
  多列索引：
  空间索引：
4.索引的设计原则
    <1>选择唯一性索引
           唯一性索引的值是唯一的，可以更快速的根据该索引确定某条记录，如学生表中的id，具有唯一性字段  
    <2>为经常需要排序、分组和联合操作的字段建立索引
          排序操作很浪费时间，为其建立索引，可以有效的避免排序操作
    <3>为经常作为查询条件的字段建立索引
          某个字段经常用来作为查询条件，该字段的查询速度会影响整个表的查询速度，为其建立索引，可提高整            个表的查询速度
    <4>限制索引的数目
           索引占用磁盘空间，索引越多占用的磁盘空间越多，修改表时，对索引的重构和更新很麻烦
    <5>尽量使用数据量少的索引
          索引的值长查询的速度慢，对char(100)进行全文检索所需的时间比char(10)类型的字段需要的时间多
    <6>尽量使用前缀来建立索引
           如果索引字段的值很长，尽量使用前缀来索引，如TEXT和BLOB类型的字段进行全文检索很花费时间，
           如果只检索字段的前面的若干个字符，会提高检索速度
    <7>删除不再使用或者很少使用的索引
           当表中的数据 被大量更新，或者数据的使用方式呗改变后，原有的索引不被需要，数据库管理员应当定期            找出这些索引，将它们删除，从而减少索引对更新操作的影响
5.创建索引
    创建索引的三种方式：
     在创建表的时候创建说索引
     在已经存在的表上创建索引
     使用ALTER TABLE 语句来创建索引
6.创建表的时候可以直接创建索引使用
                  create table 表名（属性名  数据类型【完整性约束条件】，
                                                  属性名  数据类型 【完整性约束条件】）；
   <1>创建普通索引
         mysql> create table index1( id int, name varchar(20), sex varchar(4), INDEX (id) );
Query OK, 0 rows affected (0.38 sec)

mysql> show create table index1 \G
*************************** 1. row ***************************
   Table: index1
   Create Table: CREATE TABLE `index1` (
  `id` int(11) DEFAULT NULL,
  `name` varchar(20) DEFAULT NULL,
  `sex` varchar(4) DEFAULT NULL,
   KEY `id` (`id`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1
  1 row in set (0.08 sec)
   <2>创建唯一性索引
         mysql> create table index2(
      -> id int unique，
      -> course varchar(10),
      -> age int,
      -> UNIQUE INDEX index_dd(id)
      -> );
Query OK, 0 rows affected (0.11 sec)
mysql> show create table index2 \G
*************************** 1. row ***************************
       Table: index2
Create Table: CREATE TABLE `index2` (
  `id` int(11) DEFAULT NULL,
  `course` varchar(10) DEFAULT NULL,
  `age` int(11) DEFAULT NULL,
  UNIQUE KEY `index_dd` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 //存储引擎，字符集
1 row in set (0.00 sec)                     
   <3>创建全文索引，全文索引的存储引擎的MyISAM
     mysql> create table index3(
    -> id int,
    -> info varchar(30),
    -> FULLTEXT INDEX index_info(info)
    -> )engine=MyISAM;
Query OK, 0 rows affected (0.08 sec)
mysql> show create table index3 \G
*************************** 1. row ***************************
       Table: index3
Create Table: CREATE TABLE `index3` (
  `id` int(11) DEFAULT NULL,
  `info` varchar(30) DEFAULT NULL,
  FULLTEXT KEY `index_info` (`info`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1
1 row in set (0.00 sec)
  <4>单列索引
    mysql> create table index4(
    -> id int,
    -> subject varchar(30),
    -> INDEX index_sb(subject(10))
    -> );
Query OK, 0 rows affected (0.19 sec)
mysql> show create table index4 \G
*************************** 1. row ***************************
       Table: index4
Create Table: CREATE TABLE `index4` (
  `id` int(11) DEFAULT NULL,
  `subject` varchar(30) DEFAULT NULL,
  KEY `index_sb` (`subject`(10))
) ENGINE=InnoDB DEFAULT CHARSET=latin1
1 row in set (0.00 sec)
   <5>多列索引
     mysql> create table index5(
    -> id int,
    -> name varchar(20),
    -> sex varchar(4),
    -> INDEX index_ns(name,sex)
    -> );
Query OK, 0 rows affected (0.10 sec)
mysql> show create table index5 \G
*************************** 1. row ***************************
       Table: index5
Create Table: CREATE TABLE `index5` (
  `id` int(11) DEFAULT NULL,
  `name` varchar(20) DEFAULT NULL,
  `sex` varchar(4) DEFAULT NULL,
  KEY `index_ns` (`name`,`sex`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1
1 row in set (0.06 sec)
************************************************************************************************************************
    mysql> explain select *from index5 where name='a' and sex='man'\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: index5
   partitions: NULL
         type: ref
possible_keys: index_ns
          key: index_ns
      key_len: 30
          ref: const,const
         rows: 1
     filtered: 100.00
        Extra: NULL
1 row in set, 1 warning (0.25 sec)

mysql> explain select *from index5 where name='a' \G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: index5
   partitions: NULL
         type: ref
possible_keys: index_ns
          key: index_ns
      key_len: 23
          ref: const
         rows: 1
     filtered: 100.00
        Extra: NULL
1 row in set, 1 warning (0.00 sec)

mysql> explain select *from index5 where sex='man' \G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: index5
   partitions: NULL
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 1
     filtered: 100.00
        Extra: Using where
1 row in set, 1 warning (0.00 sec)
  总结：对于多列索引而言，当进行查询时，使用索引的第一个字段查询，才能够查询到。
  <6>空间索引，存储引擎是MyISAM
mysql> create table index6 (id int, space geometry not null, SPATIAL INDEX index_sp(space) )engine=MyISAM;
Query OK, 0 rows affected (0.02 sec)

mysql> show create table index6 \G
*************************** 1. row ***************************
       Table: index6
Create Table: CREATE TABLE `index6` (
  `id` int(11) DEFAULT NULL,
  `space` geometry NOT NULL,
  SPATIAL KEY `index_sp` (`space`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1
1 row in set (0.06 sec)

全文索引和空间索引的存储引擎是MyISAM.













